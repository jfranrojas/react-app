FUNCION PARA TRAER PRODUCTOS DE FIREBASE
   function getProducts() {
     return new Promise((resolve => {
       const productsCollections = collection(database, "productos") ------> REFERENCIA DE LA COLECCION 
       getDocs(productsCollections).then(snapshot => {
         const docsData = snapshot.docs.map(doc => { return { ...doc.data(), id: doc.id } })
         resolve(docsData)
       })
     }))
   }
---------------------------------------------------------------------------------------------------
 FUNCION PARA FILTRAR PRODUCTOS

   function getItemsFromDBbyIdCategory(idCategory) {
     return new Promise((resolve) => {
       const productsCollection = collection(database, "productos");
       const queryProducts = query(productsCollection, where("categoria", "==", idCategory))
       getDocs(queryProducts).then(snapshot => {
         const docsData = snapshot.docs.map(doc => {
           return { ...doc.data(), id: doc.id }
         });
         resolve(docsData);
       });
     });
   };
-----------------------------------------------------------------------------------------------------  
RENDERIZAR TOTAL PRODUCTOS O FILTRA CATEGORIA, SI EXISTE

   useEffect(() => {
     if (idCategory) {
       getItemsFromDBbyIdCategory(idCategory).then((resolve) => {
         setData(resolve)
       })
     } else {
       getProducts().then((resolve) =>{
         setData(resolve)
       });
     }
   }, [idCategory])
--------------------------------------------------------------------------------------------------
FUNCION PARA MAPEAR ARRAY DE PRODUCTOS COMO SI FUESE BASE DE DATOS
 function getProducto() {
   return new Promise ((resolve=>{
     setTimeout(() => {
       resolve(productos)
     }, 2000);
   }))
 }
 useEffect(()=>{
   getProducto().then(products =>{
     let itemsFilter = productos.filter((element) => element.categoria === idCategory)
     if (idCategory === undefined){
       setData(products)
     }
     else {
       setData(itemsFilter)
     
   })
 }, [idCategory])

 --------------------------------------------------------------------------------------------------------------
 FUNCION PARA SIMULAR BASE DE DATOS DEL DETALLE
   
   function getProducto() {
    let itemEncontrado = productos.find((productos) => productos.id == idURL)
      return new Promise ((resolve)=>{
        setTimeout(() => {
          resolve(itemEncontrado)
        }, 2000);
      })
    }
    
    useEffect(()=>{
        getProducto().then(products =>{
        setData(products)
    })
  },)

  ---------------------------------------------------------------------------------------------------------------
FUNCION PARA CARGA DE PRODUCTOS DE FORMA MASIVA EN FIREBASE
 export async function saveProductsToFirebase(){
   const collectionProducts = collection(database, "productos")
   for(let item of productos){
       const docref = await addDoc(collectionProducts, item)
       console.log(docref.id)
   }
 } 